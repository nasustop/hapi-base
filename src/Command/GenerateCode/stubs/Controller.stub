<?php

declare(strict_types=1);

namespace %NAMESPACE%;

use App\Controller\AbstractController;
use Hyperf\HttpMessage\Exception\BadRequestHttpException;
use Psr\Http\Message\ResponseInterface;
%USES%

class %CLASS% extends AbstractController
{
    protected %INJECT_CLASS% $service;

    public function actionTemplateList(): ResponseInterface
    {
        $template = $this->getTemplate()->getTableTemplate();
        return $this->getResponse()->success($template);
    }

    public function actionTemplateCreate(): ResponseInterface
    {
        $template = $this->getTemplate()->getCreateFormTemplate();
        return $this->getResponse()->success($template);
    }

    public function actionTemplateUpdate(): ResponseInterface
    {
        $template = $this->getTemplate()->getUpdateFormTemplate();
        return $this->getResponse()->success($template);
    }

    %CONTROLLER_ENUM_ACTION%

    public function actionCreate(): ResponseInterface
    {
        $params = $this->getRequest()->all();

        %CONTROLLER_CREATE_VALIDATOR%

        $result = $this->getService()->saveData($params);

        return $this->getResponse()->success($result);
    }

    public function actionInfo(): ResponseInterface
    {
        $filter = $this->getRequest()->all();
        $result = $this->getService()->getInfo($filter);

        return $this->getResponse()->success($result);
    }

    public function actionUpdate(): ResponseInterface
    {
        $params = $this->getRequest()->all();

        %CONTROLLER_UPDATE_VALIDATOR%

        $result = $this->getService()->updateOneBy($params['filter'], $params['params']);

        return $this->getResponse()->success($result);
    }

    public function actionDelete(): ResponseInterface
    {
        $filter = $this->getRequest()->all();
        $result = $this->getService()->deleteOneBy($filter);

        return $this->getResponse()->success($result);
    }

    public function actionList(): ResponseInterface
    {
        $filter = $this->getRequest()->all();
        $page = (int) $this->getRequest()->input('page', 1);
        $page_size = (int) $this->getRequest()->input('page_size', 20);
        $result = $this->getService()->pageLists($filter, '*', $page, $page_size);

        return $this->getResponse()->success($result);
    }

    /**
     * get Service.
     */
    protected function getService(): %INJECT_CLASS%
    {
        if (empty($this->service)) {
            $this->service = make(%INJECT_CLASS%::class);
        }
        return $this->service;
    }

    /**
     * get Template.
     */
    protected function getTemplate(): %TEMPLATE_CLASS%
    {
        if (empty($this->template)) {
            $this->template = make(%TEMPLATE_CLASS%::class);
        }
        return $this->template;
    }
}
